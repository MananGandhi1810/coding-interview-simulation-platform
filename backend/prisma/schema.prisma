generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum DataProcessingState {
    QUEUED
    PROCESSING
    PROCESSED
    ERROR
}

enum ResultProcessingState {
    PENDING
    PROCESSING
    PROCESSED
    ERROR
}

enum SubmissionStatus {
    Queued
    Executing
    Executed
    TimeLimitExceeded
}

enum ProblemDifficulty {
    EASY
    MEDIUM
    HARD
}

model User {
    id                String       @id @default(cuid())
    email             String       @unique
    name              String?
    password          String
    interviews        Interview[]
    submissions       Submission[]
    isVerified        Boolean      @default(false)
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    passwordUpdatedAt DateTime     @default(now())
}

model Interview {
    id                    String                 @id @default(cuid())
    company               String
    role                  String
    yoe                   Int
    resumeUrl             String
    hasEnded              Boolean                @default(false)
    state                 DataProcessingState    @default(QUEUED)
    resultState           ResultProcessingState  @default(PENDING)
    resumeAnalysisId      String?
    resumeAnalysis        ResumeAnalysis?
    questionAnswer        QuestionAnswer[]
    interviewCodeProblems InterviewCodeProblem[]
    userId                String
    user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    updatedAt             DateTime               @updatedAt
    createdAt             DateTime               @default(now())
    Submission            Submission[]
}

model ResumeAnalysis {
    id          String    @id @default(cuid())
    analysis    String
    rating      Int
    interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
    interviewId String    @unique
    updatedAt   DateTime  @updatedAt
    createdAt   DateTime  @default(now())
}

model QuestionAnswer {
    id             String    @id @default(cuid())
    question       String
    answer         String?
    expectedAnswer String
    interview      Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
    interviewId    String
    updatedAt      DateTime  @updatedAt
    createdAt      DateTime  @default(now())
}

model Submission {
    id                 String           @id @default(cuid())
    userId             String
    time               DateTime         @default(now())
    success            Boolean?
    code               String
    language           String
    status             SubmissionStatus @default(Queued)
    problemStatementId String
    output             String?
    execTime           Int?
    passedTestCases    Int?
    totalTestCases     Int?
    codeProblem        CodeProblem      @relation(fields: [problemStatementId], references: [id], onDelete: Cascade)
    user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    interview          Interview?       @relation(fields: [interviewId], references: [id], onDelete: Cascade)
    interviewId        String?
    updatedAt          DateTime         @updatedAt
    createdAt          DateTime         @default(now())
}

model InterviewCodeProblem {
    id            String      @id @default(cuid())
    interviewId   String
    codeProblem   CodeProblem @relation(fields: [codeProblemId], references: [id], onDelete: Cascade)
    codeProblemId String
    Interview     Interview   @relation(fields: [interviewId], references: [id])
}

model CodeProblem {
    id                   String                 @id @default(cuid())
    title                String
    description          String
    difficulty           ProblemDifficulty      @default(EASY)
    submissions          Submission[]
    testCases            TestCases[]
    InterviewCodeProblem InterviewCodeProblem[]
}

model TestCases {
    id            String      @id @default(cuid())
    input         String
    output        String
    hidden        Boolean     @default(true)
    codeProblem   CodeProblem @relation(fields: [codeProblemId], references: [id], onDelete: Cascade)
    codeProblemId String
    updatedAt     DateTime    @updatedAt
    createdAt     DateTime    @default(now())
}
